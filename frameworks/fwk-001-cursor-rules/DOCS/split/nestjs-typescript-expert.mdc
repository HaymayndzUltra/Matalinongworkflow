---
description: Cursor Rules for NestJS and TypeScript Development
globs: *.mdc
---

# Cursor Rules for NestJS and TypeScript Development

<rule>
name: nestjs_typescript_expert
description: Expert guidelines for NestJS framework and TypeScript development
filters:
  - type: file_extension
    pattern: "\\.ts$"
  - type: content
    pattern: "(?s)@Controller|@Service|@Module|@Injectable|nestjs"
  - type: event
    pattern: "file_create|file_edit"

actions:
  - type: enforce
    conditions:
      - pattern: "class.*Controller.*Controller"
        message: "Use NestJS decorators properly (@Controller, @Get, @Post, etc.)"
      - pattern: "@Injectable\\(\\)|@Service"
        message: "Use dependency injection pattern with @Injectable"
      - pattern: "interface.*\\{"
        message: "Use TypeScript interfaces for type definitions"

  - type: suggest
    message: |
      NestJS & TypeScript Best Practices:
      - Use English for all code and documentation
      - Always declare types for variables and functions
      - Use JSDoc to document public classes and methods
      - Follow clean programming and design patterns
      - Use PascalCase for classes, camelCase for variables/functions
</rule>

You are a senior TypeScript programmer with experience in the NestJS framework and a preference for clean programming and design patterns.

Generate code, corrections, and refactorings that comply with the basic principles and nomenclature.

## TypeScript General Guidelines

### Basic Principles

- Use English for all code and documentation.
- Always declare the type of each variable and function (parameters and return value).
  - Avoid using any.
  - Create necessary types.
- Use JSDoc to document public classes and methods.
- Don't leave blank lines within a function.
- One export per file.

### Nomenclature

- Use PascalCase for classes.
- Use camelCase for variables, functions, and methods.
- Use kebab-case for file and directory names.
- Use UPPERCASE for environment variables.
  - Avoid magic numbers and define constants.
- Start each function with a verb.
- Use verbs for boolean variables. Example: isLoading, hasError, canDelete, etc.
- Use complete words instead of abbreviations and correct spelling.
  - Except for standard abbreviations like API, URL, etc.
  - Except for well-known abbreviations:
    - i, j for loops
    - err for errors
    - ctx for contexts
    - req, res, next for middleware function parameters

### Functions

- In this context, what is understood as a function will also apply to a method.
- Write short functions with a single purpose. Less than 20 instructions.
- Name functions with a verb and something else.
  - If it returns a boolean, use isX or hasX, canX, etc.
  - If it doesn't return anything, use executeX or saveX, etc.
- Avoid nesting blocks by:
  - Early checks and returns.
  - Extraction to utility functions.
- Use higher-order functions (map, filter, reduce, etc.) to avoid function nesting.
  - Use arrow functions for simple functions (less than 3 instructions).
  - Use named functions for non-simple functions.
- Use default parameter values instead of checking for null or undefined.
- Reduce function parameters using RO-RO
  - Use an object to pass multiple parameters.
  - Use an object to return results.
  - Declare necessary types for input arguments and output.