[
  {
    "id": "kyc_hardening_test_plan_actionable_20250818",
    "description": "KYC HARDENING + TEST PLAN (memory-bank/plan/organize.md)",
    "todos": [
      {
        "text": "PHASE 0: SETUP & PROTOCOL (READ FIRST)\n\n**Explanations:**\nRead-only ingestion; mirror organizer exactly. Proposal only (no writes/execution). Timestamps must be ISO +08:00.\n\n**Concluding Step: Phase Completion Protocol**\n```bash\npython3 todo_manager.py show <task_id ReplaceAll>\npython3 todo_manager.py done <task_id ReplaceAll> <PHASE_INDEX>\n```\n\nIMPORTANT NOTE:\n- Source: memory-bank/plan/organize.md\n- Run commands from repo root unless path-prefixed\n- No state file edits in this phase",
        "done": false
      },
      {
        "text": "PHASE 1: Prepare environment\n\n**Explanations:**\nMove to repo root and ensure Python + dependencies for KYC verification.\n\n**Command Preview:**\n```bash\ncd /home/haymayndz/MatalinongWorkflow\npython3 --version\npip install -r \"KYC VERIFICATION/requirements.txt\"\n```\n\n**Concluding Step: Phase Completion Protocol**\n```bash\npython3 todo_manager.py show <task_id ReplaceAll>\npython3 todo_manager.py done <task_id ReplaceAll> <PHASE_INDEX>\n```\n\nIMPORTANT NOTE:\nUse correct path level (same directory as \"KYC VERIFICATION\").",
        "done": false
      },
      {
        "text": "PHASE 2: Apply stricter runtime thresholds via env (no code changes)\n\n**Explanations:**\nSet stricter face/quality thresholds via environment variables.\n\n**Command Preview:**\n```bash\nexport FACE_BBOX_FILL_MIN=0.35\nexport FACE_CENTERING_TOLERANCE=0.10\nexport FACE_POSE_MAX_ANGLE=20\nexport FACE_TENENGRAD_MIN_640W=800\nexport FACE_BRIGHTNESS_P05_MIN=30\nexport FACE_BRIGHTNESS_P95_MAX=225\nexport FACE_STABILITY_MIN_MS=1200\nexport FACE_PAD_SCORE_MIN=0.80\nexport FACE_PAD_SPOOF_THRESHOLD=0.25\nexport FACE_CONSENSUS_MEDIAN_MIN=0.68\nexport FACE_CONSENSUS_FRAME_MIN_COUNT=4\nexport FACE_CONSENSUS_FRAME_MIN_SCORE=0.60\n```\n\n**Concluding Step: Phase Completion Protocol**\n```bash\npython3 todo_manager.py show <task_id ReplaceAll>\npython3 todo_manager.py done <task_id ReplaceAll> <PHASE_INDEX>\n```\n\nIMPORTANT NOTE:\nEnv overrides config; no code edits.",
        "done": false
      },
      {
        "text": "PHASE 3: Persist stricter thresholds into JSON (optional; env still wins)\n\n**Explanations:**\nOptionally commit thresholds into JSON for audit trail.\n\n**Command Preview:**\n```bash\njq '.thresholds.geometry.face_bbox_fill_min.value=0.35\n  | .thresholds.geometry.face_centering_tolerance.value=0.10\n  | .thresholds.geometry.face_pose_max_angle.value=20\n  | .thresholds.geometry.face_tenengrad_min_640w.value=800\n  | .thresholds.geometry.face_brightness_p05_min.value=30\n  | .thresholds.geometry.face_brightness_p95_max.value=225\n  | .thresholds.geometry.face_stability_min_ms.value=1200\n  | .thresholds.pad.face_pad_score_min.value=0.80\n  | .thresholds.pad.face_pad_spoof_threshold.value=0.25\n  | .thresholds.burst.face_consensus_median_min.value=0.68\n  | .thresholds.burst.face_consensus_frame_min_count.value=4\n  | .thresholds.burst.face_consensus_frame_min_score.value=0.60' \\\n  \"KYC VERIFICATION/configs/face_thresholds.json\" > /tmp/face_thresholds.json && \\\nmv /tmp/face_thresholds.json \"KYC VERIFICATION/configs/face_thresholds.json\"\n```\n\n**Concluding Step: Phase Completion Protocol**\n```bash\npython3 todo_manager.py show <task_id ReplaceAll>\npython3 todo_manager.py done <task_id ReplaceAll> <PHASE_INDEX>\n```\n\nIMPORTANT NOTE:\nSafe write via temp file + move.",
        "done": false
      },
      {
        "text": "PHASE 4: Add global API key + HMAC signature middleware\n\n**Explanations:**\nStrengthen API auth with API key + HMAC, allow safe endpoints, enforce TLS (toggle in dev).\n\n**Command Preview:**\n```bash\ncat > \"KYC VERIFICATION/src/api/security_middleware.py\" <<'PY'\nimport hmac, hashlib, time\nfrom typing import Callable\nfrom fastapi import Request\nfrom starlette.middleware.base import BaseHTTPMiddleware\nfrom starlette.responses import JSONResponse\n\nALLOWED_PATHS = {\"/docs\", \"/redoc\", \"/openapi.json\", \"/health\", \"/live\", \"/metrics\", \"/metrics/prometheus\"}\n\nclass SecurityAuthMiddleware(BaseHTTPMiddleware):\n    def __init__(self, app, api_key: str, signing_key: bytes, require_tls: bool = True):\n        super().__init__(app)\n        self.api_key = api_key\n        self.signing_key = signing_key\n        self.require_tls = require_tls\n\n    async def dispatch(self, request: Request, call_next: Callable):\n        path = request.url.path\n        if any(path.startswith(p) for p in ALLOWED_PATHS):\n            return await call_next(request)\n\n        if self.require_tls and request.url.scheme != \"https\" and \"localhost\" not in str(request.url):\n            return JSONResponse({\"error\":\"HTTPS required\",\"error_code\":\"TLS_REQUIRED\"}, status_code=400)\n\n        api_key = request.headers.get(\"x-api-key\")\n        sig = request.headers.get(\"x-sig\")\n        ts = request.headers.get(\"x-ts\")\n        if not api_key or not sig or not ts:\n            return JSONResponse({\"error\":\"Missing auth headers\",\"error_code\":\"AUTH_HEADERS\"}, status_code=401)\n        if api_key != self.api_key:\n            return JSONResponse({\"error\":\"Unauthorized\",\"error_code\":\"API_KEY_BAD\"}, status_code=401)\n\n        try:\n            ts_i = int(ts)\n            if abs(time.time() - ts_i) > 300:\n                return JSONResponse({\"error\":\"Timestamp skew\",\"error_code\":\"SIG_TS\"}, status_code=401)\n        except Exception:\n            return JSONResponse({\"error\":\"Bad timestamp\",\"error_code\":\"SIG_TS\"}, status_code=401)\n\n        msg = f\"{api_key}.{ts}\".encode()\n        expected = hmac.new(self.signing_key, msg, hashlib.sha256).hexdigest()\n        if not hmac.compare_digest(expected, sig):\n            return JSONResponse({\"error\":\"Bad signature\",\"error_code\":\"SIG_BAD\"}, status_code=401)\n\n        return await call_next(request)\nPY\n```\n\n**Concluding Step: Phase Completion Protocol**\n```bash\npython3 todo_manager.py show <task_id ReplaceAll>\npython3 todo_manager.py done <task_id ReplaceAll> <PHASE_INDEX>\n```\n\nIMPORTANT NOTE:\nMiddleware file added under src/api.",
        "done": false
      },
      {
        "text": "PHASE 5: Wire middleware + tighten CORS from policy_pack.yaml\n\n**Explanations:**\nInstall middleware, restrict CORS origins from policy, TLS toggle via env.\n\n**Command Preview:**\n```bash\npython3 - <<'PY'\nimport yaml, json, os, re\nfrom pathlib import Path\nap = Path(\"KYC VERIFICATION/src/api/app.py\")\ntxt = ap.read_text(encoding=\"utf-8\")\nif \"SecurityAuthMiddleware\" not in txt:\n    txt = txt.replace(\n        \"from fastapi.middleware.cors import CORSMiddleware\",\n        \"from fastapi.middleware.cors import CORSMiddleware\\nfrom src.api.security_middleware import SecurityAuthMiddleware\"\n    )\n    policy = yaml.safe_load(Path(\"KYC VERIFICATION/configs/policy_pack.yaml\").read_text(encoding=\"utf-8\"))\n    allowed = policy.get(\"security_settings\",{}).get(\"api\",{}).get(\"allowed_origins\", [])\n    if not allowed: allowed=[\"https://app.example.com\",\"https://kyc.example.com\"]\n    txt = re.sub(r'allow_origins=\\[.*?\\]', f'allow_origins={json.dumps(allowed)}', txt, count=1, flags=re.S)\n    insert_after = \"app.add_middleware(\\n        CORSMiddleware,\"\n    hook = f'''app.add_middleware(\n        SecurityAuthMiddleware,\n        api_key=os.getenv(\"KYC_API_KEY\",\"dev_key\"),\n        signing_key=os.getenv(\"KYC_SIGNING_KEY\",\"dev_signing_key\").encode(),\n        require_tls=os.getenv(\"KYC_REQUIRE_TLS\",\"true\").lower()==\"true\"\n    )'''\n    txt = txt.replace(insert_after, insert_after) + \"\\n\" + hook + \"\\n\"\n    ap.write_text(txt, encoding=\"utf-8\")\nprint(\"OK\")\nPY\n```\n\n**Concluding Step: Phase Completion Protocol**\n```bash\npython3 todo_manager.py show <task_id ReplaceAll>\npython3 todo_manager.py done <task_id ReplaceAll> <PHASE_INDEX>\n```\n\nIMPORTANT NOTE:\nReads allowed origins from policy; secure defaults if absent.",
        "done": false
      },
      {
        "text": "PHASE 6: Set API secrets (dev example)\n\n**Explanations:**\nSet minimal secrets for local runs; use vault in prod.\n\n**Command Preview:**\n```bash\nexport KYC_API_KEY=\"dev_key\"\nexport KYC_SIGNING_KEY=\"dev_signing_key\"\nexport KYC_REQUIRE_TLS=\"false\"\n```\n\n**Concluding Step: Phase Completion Protocol**\n```bash\npython3 todo_manager.py show <task_id ReplaceAll>\npython3 todo_manager.py done <task_id ReplaceAll> <PHASE_INDEX>\n```\n\nIMPORTANT NOTE:\nDev only; secure in production.",
        "done": false
      },
      {
        "text": "PHASE 7: Fix v2 lock action to pass required fields\n\n**Explanations:**\nEnsure API passes bbox/dims/metrics/lock_token to handler.\n\n**Command Preview:**\n```bash\npython3 - <<'PY'\nfrom pathlib import Path; import re\np = Path(\"KYC VERIFICATION/src/api/v2_endpoints.py\")\ns = p.read_text(encoding=\"utf-8\")\npat = r'if action == \"lock\":[\\s\\S]*?result = handle_lock_check\\(session_id, lock_token\\)[\\s\\S]*?elif action == \"upload\"'\nif re.search(pat, s):\n    repl = (\n        'if action == \"lock\":\\n'\n        '            d = data or {}\\n'\n        '            bbox = d.get(\"bbox\", {\"x\":0,\"y\":0,\"width\":0,\"height\":0})\\n'\n        '            frame_width = int(d.get(\"frame_width\", 640))\\n'\n        '            frame_height = int(d.get(\"frame_height\", 480))\\n'\n        '            landmarks = d.get(\"landmarks\")\\n'\n        '            metrics = d.get(\"metrics\")\\n'\n        '            lock_token = d.get(\"lock_token\")\\n'\n        '            result = handle_lock_check(\\n'\n        '                session_id=session_id,\\n'\n        '                bbox=bbox,\\n'\n        '                frame_width=frame_width,\\n'\n        '                frame_height=frame_height,\\n'\n        '                landmarks=landmarks,\\n'\n        '                metrics=metrics,\\n'\n        '                lock_token=lock_token\\n'\n        '            )\\n'\n        '        \\n'\n        '        elif action == \"upload\":'\n    )\n    s = re.sub(pat, repl, s)\n    p.write_text(s, encoding=\"utf-8\")\nprint(\"OK\")\nPY\n```\n\n**Concluding Step: Phase Completion Protocol**\n```bash\npython3 todo_manager.py show <task_id ReplaceAll>\npython3 todo_manager.py done <task_id ReplaceAll> <PHASE_INDEX>\n```\n\nIMPORTANT NOTE:\nPattern-based safe replace.",
        "done": false
      },
      {
        "text": "PHASE 8: Patch undefined metrics in handle_lock_check\n\n**Explanations:**\nDefine missing metric fields before quality gates aggregation.\n\n**Command Preview:**\n```bash\npython3 - <<'PY'\nfrom pathlib import Path\nfp = Path(\"KYC VERIFICATION/src/face/handlers.py\")\nt = fp.read_text(encoding=\"utf-8\")\nneedle = \"quality_metrics = {\"\nif needle in t and \"consensus_quality\" in t:\n    t = t.replace(\n        \"# Prepare metrics for quality gates\\n    quality_metrics = {\",\n        \"# Prepare metrics for quality gates\\n\"\n        \"    focus = (metrics or {}).get('focus_score', 1.0)\\n\"\n        \"    motion = (metrics or {}).get('motion_score', 0.0)\\n\"\n        \"    glare = (metrics or {}).get('glare_percent', 0.0)\\n\"\n        \"    corners = (metrics or {}).get('corners_score', 1.0)\\n\"\n        \"    consensus_quality = float((metrics or {}).get('overall_quality', 0.0))\\n\"\n        \"    quality_metrics = {\"\n    )\n    fp.write_text(t, encoding='utf-8')\nprint(\"OK\")\nPY\n```\n\n**Concluding Step: Phase Completion Protocol**\n```bash\npython3 todo_manager.py show <task_id ReplaceAll>\npython3 todo_manager.py done <task_id ReplaceAll> <PHASE_INDEX>\n```\n\nIMPORTANT NOTE:\nKeeps handler robust to missing metrics.",
        "done": false
      },
      {
        "text": "PHASE 9: Restrict CORS verify diff\n\n**Explanations:**\nConfirm updated CORS origins are in app.py.\n\n**Command Preview:**\n```bash\nrg -n \"allow_origins\" \"KYC VERIFICATION/src/api/app.py\" | cat\n```\n\n**Concluding Step: Phase Completion Protocol**\n```bash\npython3 todo_manager.py show <task_id ReplaceAll>\npython3 todo_manager.py done <task_id ReplaceAll> <PHASE_INDEX>\n```\n\nIMPORTANT NOTE:\nVerification-only.",
        "done": false
      },
      {
        "text": "PHASE 10: Start API (dev)\n\n**Explanations:**\nLaunch API locally for smoke tests.\n\n**Command Preview:**\n```bash\ncd \"KYC VERIFICATION\"\npython3 run_api.py\n```\n\n**Concluding Step: Phase Completion Protocol**\n```bash\npython3 todo_manager.py show <task_id ReplaceAll>\npython3 todo_manager.py done <task_id ReplaceAll> <PHASE_INDEX>\n```\n\nIMPORTANT NOTE:\nDev run; ensure secrets set.",
        "done": false
      },
      {
        "text": "PHASE 11: Generate auth headers for curl\n\n**Explanations:**\nCompute HMAC signature and timestamp.\n\n**Command Preview:**\n```bash\nTS=$(date +%s)\nSIG=$(python3 - <<PY\nimport os,hmac,hashlib,time\nk=os.getenv(\"KYC_SIGNING_KEY\",\"dev_signing_key\").encode()\nmsg=f\"{os.getenv('KYC_API_KEY','dev_key')}.{os.getenv('TS_OVERRIDE','')}\"; \nprint(hmac.new(k,(os.getenv('KYC_API_KEY','dev_key')+'.'+str(int(time.time()))).encode(),hashlib.sha256).hexdigest())\nPY\n)\n```\n\n**Concluding Step: Phase Completion Protocol**\n```bash\npython3 todo_manager.py show <task_id ReplaceAll>\npython3 todo_manager.py done <task_id ReplaceAll> <PHASE_INDEX>\n```\n\nIMPORTANT NOTE:\nUse same keys as middleware.",
        "done": false
      },
      {
        "text": "PHASE 12: Smoke test: v2 lock\n\n**Explanations:**\nSend minimal lock request and inspect response JSON.\n\n**Command Preview:**\n```bash\ncurl -s -X POST http://localhost:8000/v2/face/scan \\\n  -H \"Content-Type: application/json\" \\\n  -H \"x-api-key: $KYC_API_KEY\" -H \"x-ts: $TS\" -H \"x-sig: $SIG\" \\\n  -d '{\n        \"session_id\":\"sess_1\",\n        \"action\":\"lock\",\n        \"data\":{\n          \"bbox\":{\"x\":100,\"y\":100,\"width\":200,\"height\":200},\n          \"frame_width\":640,\"frame_height\":480,\n          \"metrics\":{\"focus_score\":8.0,\"motion_score\":0.05,\"glare_percent\":0.02,\"corners_score\":0.97,\"overall_quality\":0.9}\n        }\n      }' | jq .\n```\n\n**Concluding Step: Phase Completion Protocol**\n```bash\npython3 todo_manager.py show <task_id ReplaceAll>\npython3 todo_manager.py done <task_id ReplaceAll> <PHASE_INDEX>\n```\n\nIMPORTANT NOTE:\nEnsure API is running.",
        "done": false
      },
      {
        "text": "PHASE 13: Unit tests (first-step focus)\n\n**Explanations:**\nRun available unit/API tests; tolerate absence via `|| true`.\n\n**Command Preview:**\n```bash\npytest -q \"KYC VERIFICATION/tests/test_suite_unit.py\" -q || true\npytest -q \"KYC VERIFICATION/tests/test_api.py\" -q || true\npytest -q \"KYC VERIFICATION/tests/test_api_consolidation_simple.py\" -q || true\n```\n\n**Concluding Step: Phase Completion Protocol**\n```bash\npython3 todo_manager.py show <task_id ReplaceAll>\npython3 todo_manager.py done <task_id ReplaceAll> <PHASE_INDEX>\n```\n\nIMPORTANT NOTE:\nKeep run time reasonable.",
        "done": false
      },
      {
        "text": "PHASE 14: Add targeted tests for lock gates (optional)\n\n**Explanations:**\nCreate a focused test for lock quality gates and run it.\n\n**Command Preview:**\n```bash\nmkdir -p \"KYC VERIFICATION/tests/custom\"\ncat > \"KYC VERIFICATION/tests/custom/test_lock_quality_gates.py\" <<'PY'\nimport pytest\nfrom src.face.handlers import handle_lock_check\n\ndef _req(metrics=None, w=640, h=480):\n    return dict(\n        session_id=\"sess_t\",\n        bbox={\"x\":100,\"y\":100,\"width\":int(0.30*w),\"height\":int(0.30*h)},\n        frame_width=w, frame_height=h, landmarks=None, gray_face_region=None, metrics=metrics\n    )\n\ndef test_reject_low_fill_ratio():\n    r = handle_lock_check(**_req(metrics={\"focus_score\":8,\"motion_score\":0.05,\"glare_percent\":0.02,\"corners_score\":0.99}))\n    assert r[\"ok\"] is False and \"FILL_OUT_OF_RANGE\" in r.get(\"reasons\", [])\n\ndef test_cancel_on_jitter_motion():\n    r = handle_lock_check(**_req(metrics={\"focus_score\":8,\"motion_score\":0.6,\"glare_percent\":0.02,\"corners_score\":0.99}))\n    assert r[\"ok\"] is False\n\ndef test_countdown_token_too_early():\n    r = handle_lock_check(**_req(metrics={\"focus_score\":8,\"motion_score\":0.01,\"glare_percent\":0.02,\"corners_score\":0.99}))\n    assert (\"lock_token\" in r) == r[\"ok\"]\nPY\npytest -q \"KYC VERIFICATION/tests/custom/test_lock_quality_gates.py\" -q || true\n```\n\n**Concluding Step: Phase Completion Protocol**\n```bash\npython3 todo_manager.py show <task_id ReplaceAll>\npython3 todo_manager.py done <task_id ReplaceAll> <PHASE_INDEX>\n```\n\nIMPORTANT NOTE:\nOptional; keep tests isolated.",
        "done": false
      },
      {
        "text": "PHASE 15: Performance target check (cancel-on-jitter path)\n\n**Explanations:**\nQuick smoke performance call to quality manager (load tests separate).\n\n**Command Preview:**\n```bash\npython3 - <<'PY'\nfrom src.face.quality_gates import get_quality_manager\nqm = get_quality_manager(); r = qm.check_quality({\"motion\": 0.9, \"focus\": 0.4, \"glare\": 0.5})\nprint({\"response_time_ms\": r.response_time_ms, \"cancel\": bool(r.cancel_reason)})\nPY\n```\n\n**Concluding Step: Phase Completion Protocol**\n```bash\npython3 todo_manager.py show <task_id ReplaceAll>\npython3 todo_manager.py done <task_id ReplaceAll> <PHASE_INDEX>\n```\n\nIMPORTANT NOTE:\nFor indicative timing only.",
        "done": false
      },
      {
        "text": "PHASE 16: Security checks\n\n**Explanations:**\nValidate 401 responses for missing headers and bad signatures.\n\n**Command Preview:**\n```bash\ncurl -s -X POST http://localhost:8000/v2/face/scan -H \"Content-Type: application/json\" \\\n  -d '{\"session_id\":\"s\",\"action\":\"lock\",\"data\":{}}' | jq .\n\ncurl -s -X POST http://localhost:8000/v2/face/scan \\\n  -H \"Content-Type: application/json\" -H \"x-api-key: $KYC_API_KEY\" -H \"x-ts: $TS\" -H \"x-sig: BAD\" \\\n  -d '{\"session_id\":\"s\",\"action\":\"lock\",\"data\":{}}' | jq .\n```\n\n**Concluding Step: Phase Completion Protocol**\n```bash\npython3 todo_manager.py show <task_id ReplaceAll>\npython3 todo_manager.py done <task_id ReplaceAll> <PHASE_INDEX>\n```\n\nIMPORTANT NOTE:\nMust return 401 with error codes.",
        "done": false
      },
      {
        "text": "PHASE 17: Enforce per-IP rate-limit at gateway (optional)\n\n**Explanations:**\nConfigure gateway to match configs/thresholds.json.rate_limit_per_minute.\n\n**Command Preview:**\n```bash\n# configure nginx/ingress rate limit per policy (implementation-specific)\n```\n\n**Concluding Step: Phase Completion Protocol**\n```bash\npython3 todo_manager.py show <task_id ReplaceAll>\npython3 todo_manager.py done <task_id ReplaceAll> <PHASE_INDEX>\n```\n\nIMPORTANT NOTE:\nKeep settings in infra-as-code.",
        "done": false
      },
      {
        "text": "PHASE 18: Run full suite (if available)\n\n**Explanations:**\nRun entire test suite and record pass/fail.\n\n**Command Preview:**\n```bash\npytest -q \"KYC VERIFICATION/tests\" || true\n```\n\n**Concluding Step: Phase Completion Protocol**\n```bash\npython3 todo_manager.py show <task_id ReplaceAll>\npython3 todo_manager.py done <task_id ReplaceAll> <PHASE_INDEX>\n```\n\nIMPORTANT NOTE:\nCapture summary artifacts if present.",
        "done": false
      },
      {
        "text": "PHASE 19: Production notes\n\n**Explanations:**\nFinalize production posture: TLS, secret storage, metrics/alerts, periodic threshold validation.\n\n**Command Preview:**\n```bash\n# - Set KYC_REQUIRE_TLS=true in prod\n# - Keep API keys/signing keys in secret store\n# - Monitor /metrics and /metrics/prometheus\n# - Re-validate thresholds via src/config/threshold_manager.py validate_all()\n```\n\n**Concluding Step: Phase Completion Protocol**\n```bash\npython3 todo_manager.py show <task_id ReplaceAll>\npython3 todo_manager.py done <task_id ReplaceAll> <PHASE_INDEX>\n```\n\nIMPORTANT NOTE:\nOperational guidance; ensure alignment with SRE policies.",
        "done": false
      }
    ],
    "status": "in_progress",
    "created": "2025-08-18T19:15:00+08:00",
    "updated": "2025-08-18T19:15:00+08:00"
  }
]