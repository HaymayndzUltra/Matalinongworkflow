[
  {
  "id": "arch-refactor-plan-20250811",
  "description": "A multi-phase plan to refactor the agent architecture based on the recent analysis, focusing on consolidating patterns, improving error handling, and cleaning up dependencies.",
  "todos": [
    {
      "text": "PHASE 0: SETUP & PROTOCOL (READ FIRST)\n\n**Core Behavioral Mandates:**\n* **Execute Sequentially**: This plan is gated. Complete phases in order (0, 1, 2, ...).\n* **Verify Each Step**: Before marking a phase as `done`, ensure all its technical artifacts are implemented, tested, and committed.\n\n**How-To/Workflow Protocol:**\nThis plan is managed by `todo_manager.py`.\n1. To view: `python3 todo_manager.py show arch-refactor-plan-20250811`\n2. When a phase is complete: `python3 todo_manager.py done arch-refactor-plan-20250811 0`\n\n**Concluding Step: Phase Completion Protocol**\nTo conclude this phase:\n1. **Review**: `python3 todo_manager.py show arch-refactor-plan-20250811`\n2. **Done**:   `python3 todo_manager.py done arch-refactor-plan-20250811 0`\n\n──────────────────────────────────\nIMPORTANT NOTE: This phase contains the operating protocol for the plan.",
      "done": false
    },
    {
      "text": "PHASE 1: Critical Blockers & CI Setup\n\n**Explanations:**\nThis phase addresses critical startup crashes, configuration fragmentation, and establishes automated code quality checks to prevent future regressions. These are foundational fixes identified as blockers in the architectural review.\n\n**Technical Artifacts / Tasks:**\n1. **Fix Missing Import**: In `service_registry_agent.py`, add the line `from common_utils.port_registry import get_port` to resolve the startup crash.\n2. **Consolidate Config Loaders**: Unify the three separate `config_loader.py` implementations into a new, single module: `common.config.unified_loader`.\n3. **Migrate Hard-Coded Values**: Move all hard-coded ports (e.g., in `async_processor.py`) and credentials to the new unified YAML/ENV configuration system.\n4. **Enable CI Linting**: Integrate and enable a CI pipeline step that runs `ruff`, `mypy --strict`, and `bandit` to catch unused/missing imports and other quality issues automatically.\n\n**Commands (from source):**\n```bash\n# Command to find and fix unused imports\nruff --select F401 --fix .\n# Alternative legacy command mentioned in source\n# autoflake --remove-unused-vars --in-place --recursive .\n```\n\n**Concluding Step: Phase Completion Protocol**\nTo conclude:\n1. **Review**: `python3 todo_manager.py show arch-refactor-plan-20250811`\n2. **Done**:   `python3 todo_manager.py done arch-refactor-plan-20250811 1`\n\n──────────────────────────────────\nIMPORTANT NOTE:\n- These tasks are non-negotiable blockers for stable operation and must be completed before proceeding to subsequent phases.",
      "done": false
    },
    {
      "text": "PHASE 2: High-Priority Error Handling & Core Utilities\n\n**Explanations:**\nThis phase standardizes error reporting and logging across all agents (Main-PC and PC2) and consolidates common utilities for performance and consistency. This directly addresses the high-priority items from the action plan.\n\n**Technical Artifacts / Tasks:**\n1. **Expand Error Publisher**: Extend the central `ErrorPublisher` to be used by PC2 agents, ensuring they no longer log errors only to stdout.\n2. **Adopt Structured Errors**: Implement and adopt the `common.utils.error_types` enum (e.g., USER_ERROR, SYSTEM_ERROR) for all error publications.\n3. **Refine Exception Handling**: Replace broad `except Exception:` clauses with granular catches (e.g., `except (zmq.Again, TimeoutError)`), and publish categorized errors to the error bus.\n4. **Standardize Logging**: Configure all logging via `logging.config.dictConfig` loaded from the unified config. Forbid and remove all `print()` statements used for application logging.\n5. **Consolidate JSON Utility**: Create a new `common.utils.fastjson` utility that wraps `orjson` with a fallback to the standard `json` library, and refactor code to use it.\n\n**Concluding Step: Phase Completion Protocol**\nTo conclude:\n1. **Review**: `python3 todo_manager.py show arch-refactor-plan-20250811`\n2. **Done**:   `python3 todo_manager.py done arch-refactor-plan-20250811 2`\n\n──────────────────────────────────\nIMPORTANT NOTE:\n- Uniform error visibility is a high-priority, non-negotiable goal for improving system triage and reliability.",
      "done": false
    },
    {
      "text": "PHASE 3: Architectural Pattern Refinement\n\n**Explanations:**\nThis phase refactors key architectural patterns (Base-Class, Strategy, Asynchronous Pipeline) to improve modularity, reusability, and adherence to best practices as identified in the analysis.\n\n**Technical Artifacts / Tasks:**\n1. **Promote Enhanced Agent Wrapper**: Refactor all agents to use the conditional import wrapper for `EnhancedBaseAgent`, making its features universally available.\n2. **Refactor Strategy Pattern**: In the Service Registry, refactor the backend selection logic. Encapsulate the in-memory and Redis strategies into separate, pluggable modules to eliminate runtime `if self.backend == \"redis\"` checks.\n3. **Improve Async Queue**: Replace the custom priority queue implementation (based on `collections.deque`) in `async_processor.py` with the standard `asyncio.PriorityQueue` to leverage built-in back-pressure and simplify the code.\n\n**Concluding Step: Phase Completion Protocol**\nTo conclude:\n1. **Review**: `python3 todo_manager.py show arch-refactor-plan-20250811`\n2. **Done**:   `python3 todo_manager.py done arch-refactor-plan-20250811 3`\n\n──────────────────────────────────\nIMPORTANT NOTE:\n- These changes are required to improve the long-term maintainability and extensibility of the agent framework.",
      "done": false
    },
    {
      "text": "PHASE 4: Dependency Management & Documentation\n\n**Explanations:**\nThis phase cleans up the project's dependency tree for leaner, more reproducible builds and documents the newly refactored architecture for future developers. This covers the low-priority/backlog items.\n\n**Technical Artifacts / Tasks:**\n1. **Purge Unused Dependencies**: Audit `requirements.txt` and remove declared but unused third-party libraries (e.g., `requests`, `pillow`).\n2. **Pin Dependency Versions**: Tighten loose version pins in `requirements.txt` (e.g., `torch>=1.13`) to minor-level pins (e.g., `torch~=1.13.0`) to ensure reproducible builds.\n3. **Document Architecture**: Create or update the `docs/architecture.md` file. This document must describe the consolidated patterns (config, error handling, fastjson) and the rationale behind the refactoring.\n\n**Concluding Step: Phase Completion Protocol**\nTo conclude:\n1. **Review**: `python3 todo_manager.py show arch-refactor-plan-20250811`\n2. **Done**:   `python3 todo_manager.py done arch-refactor-plan-20250811 4`\n\n──────────────────────────────────\nIMPORTANT NOTE:\n- Accurate dependencies and documentation are critical for project onboarding and production stability. The documentation must be updated *after* the refactoring is complete.",
      "done": false
    },
    {
      "text": "PHASE 5: Final Review & Plan Completion\n\n**Explanations:**\nA final verification step to ensure all refactoring tasks are complete, the system is stable, and the plan can be marked as finished.\n\n**Technical Artifacts / Tasks:**\n1. **Run Full Test Suite**: Execute the entire automated test suite and confirm 100% pass rate.\n2. **Manual Verification**: Manually start a sample agent and verify it uses the unified config, reports errors to the central bus, and functions as expected.\n3. **Confirm Documentation**: Verify that the `docs/architecture.md` file is committed and accurately reflects the final, refactored state of the codebase.\n\n**Concluding Step: Phase Completion Protocol**\nTo conclude:\n1. **Review**: `python3 todo_manager.py show arch-refactor-plan-20250811`\n2. **Done**:   `python3 todo_manager.py done arch-refactor-plan-20250811 5`\n\n──────────────────────────────────\nIMPORTANT NOTE:\n- This is the final gate. Do not conclude this phase until all previous phases are done and verified.",
      "done": false
    }
  ],
  "status": "in_progress",
  "created": "2025-08-11T10:57:00+08:00",
  "updated": "2025-08-11T10:57:00+08:00"
}

]