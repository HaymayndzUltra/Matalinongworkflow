[
  {
    "id": "memory_system_canonicalization_actionable_20250820_analysis_20250821",
    "description": "Pre-execution analysis for Actionable plan compiled from MEMORY SYSTEM organizer. Source: memory-bank/plan/organize.md: detect ownership overlaps, policy conflicts, contract/schema drift, dependency inversions, semantic duplicates, and scoping mistakes BEFORE execution.",
    "status": "in_progress",
    "created": "2025-08-21T08:35:00+08:00",
    "updated": "2025-08-21T08:35:00+08:00",
    "todos": [
      {
        "text": "PHASE 0: SETUP & PROTOCOL (READ FIRST) — ANALYSIS\n\nPurpose: Check for duplicates, overlaps, or conflicts with existing phases or codebase logic before execution. List all detected issues explicitly.\nScope: Semantic/architectural review only; Cross-check applies both across this plan and against existing codebase/system logic.\n\nChecks:\n• Single ownership/authority (no double owners).\n• Correct dependency order (no circular/inverted prerequisites).\n• Consistent contract/schema (inputs/outputs mean the same everywhere).\n• Flags/gating not mutually enabled when exclusive.\n• No severity/priority overlap with other phases.\n• Cross-phase collisions or missing referenced items (blind spots).\n• Traceability to requirements is clear (no orphan phases).\n• Boundaries/interfaces are well-defined (no gray zones).\n• Tasks are complementary, not redundant unless explicitly intentional.\n• Conceptual failure paths are clear (no silent breaks).\n• Semantic duplicate scan (codebase-wide; ignore name differences).\n• Policy contradiction check for the same concern (criteria/order/owner).\n• Evidence requirement: list file paths, symbols, and line spans for all hits.\n\nLOGIC PARITY CHECK (Semantic Method):\n1) Build a Semantic Signature: inputs/signals; criteria/thresholds; flow/state/steps; outputs/contract semantics; side-effects (events/writes/calls).\n2) Normalize: lemmatize verbs, canonicalize units/operators, strip naming noise.\n3) Compare against codebase candidates.\n4) Rubric: ≥0.80 or 4–5/5 = duplicate; 0.55–0.79 or 3/5 = overlap; divergent/conflicting rules for same concern = conflict.\n\nDecision Gate: Do not proceed if any duplicates, overlaps, or conflicts exist. All detected issues must be listed with similarity scores and evidence (paths/symbols/lines) before execution.\n\n**Concluding Step: Phase Completion Protocol**\n```bash\npython3 todo_manager.py show <TASK_ID>\npython3 todo_manager.py done <TASK_ID> <PHASE_INDEX>\n```\nIMPORTANT NOTE: Analysis-only; mirror of Phase 0; do not execute or edit state; HALT if the execution phase lacks an \"IMPORTANT NOTE:\".",
        "done": false
      },
      {
        "text": "PHASE 1: Establish canonical memory domains — ANALYSIS\n\nPurpose: Check for duplicates, overlaps, or conflicts with existing phases or codebase logic before execution. List all detected issues explicitly.\nScope: Semantic/architectural review only; Cross-check applies both across this plan and against existing codebase/system logic.\n\nChecks:\n• Single ownership/authority for execution/context/human-readable SOTs.\n• Correct dependency order (no circular/inverted prerequisites).\n• Consistent contract/schema across SOT boundaries.\n• Exclusive flags/gates; no overlaps in responsibilities.\n• Boundaries/interfaces clear between JSON SOT, cursor state, and session markdown writer.\n• Duplicate/overlap scan for multiple writers of current-session.md.\n• Evidence requirement: list file paths, symbols, and line spans for all hits.\n\nLOGIC PARITY CHECK (Semantic Method): same as Phase 0.\n\nDecision Gate: same as Phase 0.\n\n**Concluding Step: Phase Completion Protocol**\n```bash\npython3 todo_manager.py show <TASK_ID>\npython3 todo_manager.py done <TASK_ID> <PHASE_INDEX>\n```\nIMPORTANT NOTE: Analysis-only; mirror of Phase 1.",
        "done": false
      },
      {
        "text": "PHASE 2: Add structured run/decision logging (SQLite, WAL) — ANALYSIS\n\nPurpose: Check for duplicates, overlaps, or conflicts with existing phases or codebase logic before execution. List all detected issues explicitly.\nScope: Semantic/architectural review only; Cross-check applies both across this plan and against existing codebase/system logic.\n\nChecks:\n• SQLite path `memory-bank/memory/state.sqlite` is canonical; WAL mode enabled.\n• No blobs in DB: stdout/stderr stored as file paths.\n• CLI contracts for `init`, `log-run`, `log-decision`, `set-context` are consistent.\n• Duplicate schema/version drift across modules is absent.\n• Evidence requirement: list file paths, symbols, and line spans for all hits.\n\nLOGIC PARITY CHECK: same as Phase 0.\n\nDecision Gate: same as Phase 0.\n\n**Concluding Step: Phase Completion Protocol**\n```bash\npython3 todo_manager.py show <TASK_ID>\npython3 todo_manager.py done <TASK_ID> <PHASE_INDEX>\n```\nIMPORTANT NOTE: Analysis-only; mirror of Phase 2.",
        "done": false
      },
      {
        "text": "PHASE 3: Hook execution logging into todo runner — ANALYSIS\n\nPurpose: Check for duplicates, overlaps, or conflicts with existing phases or codebase logic before execution. List all detected issues explicitly.\nScope: Semantic/architectural review only; Cross-check applies both across this plan and against existing codebase/system logic.\n\nChecks:\n• Hook placement in `todo_manager.exec_substep` captures timings, stdout/stderr, exit codes, status.\n• Calls to `memory_store.py log-run` include task_id, phase_index, sub_index, command, status, exit_code, stdout_path, stderr_path, started_at, ended_at.\n• Log folder `memory-bank/logs/` canonical; secrets never included.\n• No duplicate logging layers creating double-writes.\n• Evidence requirement: list file paths, symbols, and line spans for all hits.\n\nLOGIC PARITY CHECK: same as Phase 0.\n\nDecision Gate: same as Phase 0.\n\n**Concluding Step: Phase Completion Protocol**\n```bash\npython3 todo_manager.py show <TASK_ID>\npython3 todo_manager.py done <TASK_ID> <PHASE_INDEX>\n```\nIMPORTANT NOTE: Analysis-only; mirror of Phase 3.",
        "done": false
      },
      {
        "text": "PHASE 4: Eliminate competing writers for current-session.md — ANALYSIS\n\nPurpose: Check for duplicates, overlaps, or conflicts with existing phases or codebase logic before execution. List all detected issues explicitly.\nScope: Semantic/architectural review only; Cross-check applies both across this plan and against existing codebase/system logic.\n\nChecks:\n• Only `cursor_memory_bridge.dump_markdown()` writes the full snapshot.\n• Other modules call the bridge, do not write MD directly.\n• Append-only \"Memory Note\" sections do not overwrite main snapshot.\n• Evidence requirement: list file paths, symbols, and line spans for all hits.\n\nLOGIC PARITY CHECK: same as Phase 0.\n\nDecision Gate: same as Phase 0.\n\n**Concluding Step: Phase Completion Protocol**\n```bash\npython3 todo_manager.py show <TASK_ID>\npython3 todo_manager.py done <TASK_ID> <PHASE_INDEX>\n```\nIMPORTANT NOTE: Analysis-only; mirror of Phase 4.",
        "done": false
      },
      {
        "text": "PHASE 5: Atomic writes + file locking for JSON SOT — ANALYSIS\n\nPurpose: Check for duplicates, overlaps, or conflicts with existing phases or codebase logic before execution. List all detected issues explicitly.\nScope: Semantic/architectural review only; Cross-check applies both across this plan and against existing codebase/system logic.\n\nChecks:\n• Temp-file + `os.replace` semantics used for writes.\n• `fcntl` advisory file locks wrap read/write of task JSON files.\n• No partial writes; atomicity guaranteed.\n• Evidence requirement: list file paths, symbols, and line spans for all hits.\n\nLOGIC PARITY CHECK: same as Phase 0.\n\nDecision Gate: same as Phase 0.\n\n**Concluding Step: Phase Completion Protocol**\n```bash\npython3 todo_manager.py show <TASK_ID>\npython3 todo_manager.py done <TASK_ID> <PHASE_INDEX>\n```\nIMPORTANT NOTE: Analysis-only; mirror of Phase 5.",
        "done": false
      },
      {
        "text": "PHASE 6: Timezone normalization (PH +08:00) — ANALYSIS\n\nPurpose: Check for duplicates, overlaps, or conflicts with existing phases or codebase logic before execution. List all detected issues explicitly.\nScope: Semantic/architectural review only; Cross-check applies both across this plan and against existing codebase/system logic.\n\nChecks:\n• All modules emit ISO timestamps with +08:00; no UTC-naive times.\n• Displayed/saved times normalized consistently.\n• Evidence requirement: list file paths, symbols, and line spans for all hits.\n\nLOGIC PARITY CHECK: same as Phase 0.\n\nDecision Gate: same as Phase 0.\n\n**Concluding Step: Phase Completion Protocol**\n```bash\npython3 todo_manager.py show <TASK_ID>\npython3 todo_manager.py done <TASK_ID> <PHASE_INDEX>\n```\nIMPORTANT NOTE: Analysis-only; mirror of Phase 6.",
        "done": false
      },
      {
        "text": "PHASE 7: Cursor state unification — ANALYSIS\n\nPurpose: Check for duplicates, overlaps, or conflicts with existing phases or codebase logic before execution. List all detected issues explicitly.\nScope: Semantic/architectural review only; Cross-check applies both across this plan and against existing codebase/system logic.\n\nChecks:\n• Canonical path is `memory-bank/cursor_state.json`.\n• Mirror to root only if root exists; prevent double-writing by auto-sync.\n• Evidence requirement: list file paths, symbols, and line spans for all hits.\n\nLOGIC PARITY CHECK: same as Phase 0.\n\nDecision Gate: same as Phase 0.\n\n**Concluding Step: Phase Completion Protocol**\n```bash\npython3 todo_manager.py show <TASK_ID>\npython3 todo_manager.py done <TASK_ID> <PHASE_INDEX>\n```\nIMPORTANT NOTE: Analysis-only; mirror of Phase 7.",
        "done": false
      },
      {
        "text": "PHASE 8: Retention policy safety — ANALYSIS\n\nPurpose: Check for duplicates, overlaps, or conflicts with existing phases or codebase logic before execution. List all detected issues explicitly.\nScope: Semantic/architectural review only; Cross-check applies both across this plan and against existing codebase/system logic.\n\nChecks:\n• Archive completed tasks to `memory-bank/queue-system/tasks_done.json`; do not purge silently.\n• Define size/time rotation windows to avoid unbounded growth.\n• Evidence requirement: list file paths, symbols, and line spans for all hits.\n\nLOGIC PARITY CHECK: same as Phase 0.\n\nDecision Gate: same as Phase 0.\n\n**Concluding Step: Phase Completion Protocol**\n```bash\npython3 todo_manager.py show <TASK_ID>\npython3 todo_manager.py done <TASK_ID> <PHASE_INDEX>\n```\nIMPORTANT NOTE: Analysis-only; mirror of Phase 8.",
        "done": false
      },
      {
        "text": "PHASE 9: MCP config hygiene — ANALYSIS\n\nPurpose: Check for duplicates, overlaps, or conflicts with existing phases or codebase logic before execution. List all detected issues explicitly.\nScope: Semantic/architectural review only; Cross-check applies both across this plan and against existing codebase/system logic.\n\nChecks:\n• Secrets removed from VCS; use env placeholders.\n• Valid `memory.json` present or generated via setup script.\n• Prefer local MCP fallback when external services unavailable.\n• Evidence requirement: list file paths, symbols, and line spans for all hits.\n\nLOGIC PARITY CHECK: same as Phase 0.\n\nDecision Gate: same as Phase 0.\n\n**Concluding Step: Phase Completion Protocol**\n```bash\npython3 todo_manager.py show <TASK_ID>\npython3 todo_manager.py done <TASK_ID> <PHASE_INDEX>\n```\nIMPORTANT NOTE: Analysis-only; mirror of Phase 9.",
        "done": false
      },
      {
        "text": "PHASE 10: Tests and validation — ANALYSIS\n\nPurpose: Check for duplicates, overlaps, or conflicts with existing phases or codebase logic before execution. List all detected issues explicitly.\nScope: Semantic/architectural review only; Cross-check applies both across this plan and against existing codebase/system logic.\n\nChecks:\n• Concurrency tests simulate parallel writers; schema intact; no truncation.\n• Logging assertions validate `runs` row and stdout/stderr files.\n• Markdown ownership consistency: only the bridge writes the snapshot.\n• Evidence requirement: list file paths, symbols, and line spans for all hits.\n\nLOGIC PARITY CHECK: same as Phase 0.\n\nDecision Gate: same as Phase 0.\n\n**Concluding Step: Phase Completion Protocol**\n```bash\npython3 todo_manager.py show <TASK_ID>\npython3 todo_manager.py done <TASK_ID> <PHASE_INDEX>\n```\nIMPORTANT NOTE: Analysis-only; mirror of Phase 10.",
        "done": false
      },
      {
        "text": "PHASE 11: Observability (optional) — ANALYSIS\n\nPurpose: Check for duplicates, overlaps, or conflicts with existing phases or codebase logic before execution. List all detected issues explicitly.\nScope: Semantic/architectural review only; Cross-check applies both across this plan and against existing codebase/system logic.\n\nChecks:\n• Daily summaries contain no secrets; optional; must not block core plan.\n• Evidence requirement: list file paths, symbols, and line spans for all hits.\n\nLOGIC PARITY CHECK: same as Phase 0.\n\nDecision Gate: same as Phase 0.\n\n**Concluding Step: Phase Completion Protocol**\n```bash\npython3 todo_manager.py show <TASK_ID>\npython3 todo_manager.py done <TASK_ID> <PHASE_INDEX>\n```\nIMPORTANT NOTE: Analysis-only; mirror of Phase 11.",
        "done": false
      },
      {
        "text": "PHASE 12: Documentation — ANALYSIS\n\nPurpose: Check for duplicates, overlaps, or conflicts with existing phases or codebase logic before execution. List all detected issues explicitly.\nScope: Semantic/architectural review only; Cross-check applies both across this plan and against existing codebase/system logic.\n\nChecks:\n• Ownership map matches actual writers and paths.\n• Boundaries/interfaces are explicit; no gray zones.\n• Evidence requirement: list file paths, symbols, and line spans for all hits.\n\nLOGIC PARITY CHECK: same as Phase 0.\n\nDecision Gate: same as Phase 0.\n\n**Concluding Step: Phase Completion Protocol**\n```bash\npython3 todo_manager.py show <TASK_ID>\npython3 todo_manager.py done <TASK_ID> <PHASE_INDEX>\n```\nIMPORTANT NOTE: Analysis-only; mirror of Phase 12.",
        "done": false
      }
    ]
  }
]