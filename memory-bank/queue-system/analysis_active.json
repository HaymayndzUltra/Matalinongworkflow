[
  {
    "id": "docker_arch_blueprint_actionable_20250818_analysis_20250818",
    "source_task_id": "docker_arch_blueprint_actionable_20250818",
    "description": "Pre-execution analysis for FINAL Docker Architecture Blueprint (memory-bank/plan/organize.md).",
    "status": "in_progress",
    "created": "2025-08-18T20:00:00+08:00",
    "updated": "2025-08-18T20:00:00+08:00",
    "todos": [
      {
        "text": "PHASE 0: SETUP & PROTOCOL (READ FIRST) — ANALYSIS\n\nPurpose: Check for duplicates, overlaps, or conflicts with execution phases and repo policies before any run. Ensure contracts/tags/constraints are consistent.\nScope: Semantic/architectural only; read-only checks; no builds or file writes.\n\nChecks:\n• Single source-of-truth (organizer + tasks_active.json alignment).\n• Tag scheme and non-root+tini policy consistently referenced.\n• CUDA/GPU defaults consistent with machine profile and families.\n• CI gates (Trivy/SBOM) referenced consistently.\n• No contradictory placeholders or environment knobs.\n• Traceability from organizer sections (A–H) to phases 1–8.\n\nLOGIC PARITY CHECK: Organizer constraints (tags, non-root, tini, CUDA 12.1) appear in plan intro and per-phase notes; no divergent baseline detected.\n\nDecision Gate: Proceed only if organizer constraints are present, coherent, and referenced by later phases without contradictions.\n\nFindings:\n- Concern: global_constraints_reference\n  Type: Overlap\n  Similarity: 0.65\n  Evidence:\n    - memory-bank/plan/organize.md:15-23 (Pinned layers, CI, registry)\n    - Why: Matches plan intro constraints.\n\nIMPORTANT NOTE: Analysis-only; confirm tag scheme, non-root+tini, CUDA 12.1, and CI gates are explicitly carried downstream; no side effects here.",
        "done": false
      },
      {
        "text": "PHASE 1: Build Functional-Family Base Images — ANALYSIS\n\nPurpose: Validate the base family hierarchy and multi-stage build policies before building.\nScope: Semantic/architectural only; no docker build.\n\nChecks:\n• Hierarchy: base-python ➜ base-utils ➜ base-cpu-pydeps/family-web and base-gpu-cu121 ➜ family-vision/torch/llm.\n• Pinned apt/pip with --require-hashes; reproducible layers.\n• Non-root UID:GID 10001:10001 + tini present in runtime stage.\n• GHCR tag scheme `YYYYMMDD-<git_sha>`; buildx with registry cache.\n• GPU families strictly inherit CUDA 12.1.\n\nLOGIC PARITY CHECK: Families and patterns line up with §B and §E examples.\n\nDecision Gate: Pass only if hierarchy/pinning/tagging/non-root+tini and CUDA inheritance are all explicitly satisfied in build specs.\n\nFindings:\n- Concern: family_hierarchy_completeness\n  Type: Overlap\n  Similarity: 0.60\n  Evidence:\n    - memory-bank/plan/organize.md:23-35,61-109\n    - Why: Mirrors required families and patterns.\n\nIMPORTANT NOTE: Do not execute builds here; ensure all families and policies are documented and traceable to actual Dockerfiles.",
        "done": false
      },
      {
        "text": "PHASE 2: Dependency Audit (Audio/Vision) — ANALYSIS\n\nPurpose: Ensure only necessary system libs are added and only to GPU-oriented families.\nScope: Semantic/architectural only; static enumeration plan.\n\nChecks:\n• Enumerate deps via static scan + ldd; produce evidence list.\n• Scope additions to family-vision/torch only if required.\n• Keep CPU families lean; avoid transitive GPU deps.\n• Maintain pinned versions and reproducible layers.\n\nLOGIC PARITY CHECK: Audit plan matches §C decisions (minimal apt, clean layers).\n\nDecision Gate: Proceed only if the dep list is justified, minimal, and scoped to GPU families.\n\nFindings:\n- Concern: audio_vision_dep_scope\n  Type: Overlap\n  Similarity: 0.55\n  Evidence:\n    - memory-bank/plan/organize.md:41-50,186-187\n    - Why: Aligns with minimalism and targeted additions.\n\nIMPORTANT NOTE: No package installs here; provide the explicit dependency inventory and mapping to target families.",
        "done": false
      },
      {
        "text": "PHASE 3: Extend CI Pipeline (Matrix, Cache, Trivy, SBOM) — ANALYSIS\n\nPurpose: Validate CI matrix, cache policy, and security/SBOM gates before implementation.\nScope: Semantic/architectural only.\n\nChecks:\n• Matrix: family × machine (mainpc, pc2) coverage.\n• buildx cache-to/from (type=registry) set to GHCR cache ref.\n• Trivy policy: fail on HIGH/CRITICAL severities.\n• SBOM upload per image; tags align with `YYYYMMDD-<git_sha>`.\n\nLOGIC PARITY CHECK: CI constraints consistent with §A and §C.\n\nDecision Gate: PASS only if CI steps/gates reflect the exact policies (cache, Trivy, SBOM, tags).\n\nFindings:\n- Concern: ci_security_cache_alignment\n  Type: Overlap\n  Similarity: 0.60\n  Evidence:\n    - memory-bank/plan/organize.md:21-22,41-49,188-189\n    - Why: Mirrors required CI posture.\n\nIMPORTANT NOTE: Do not run CI here; confirm policy documents/workflow snippets match requirements.",
        "done": false
      },
      {
        "text": "PHASE 4: Service Migration — Phase 1 (Core Infra) — ANALYSIS\n\nPurpose: Verify mapping of core infra services to families and health/ports contracts.\nScope: Semantic/architectural only.\n\nChecks:\n• Coverage table mapping (service ➜ base family) is correct.\n• Health endpoints `/health` return 200 {status:\"ok\"}.\n• Ports align with §F.\n• Image tags sourced from prior phases only.\n\nLOGIC PARITY CHECK: Mappings and contracts reflect §F.\n\nDecision Gate: PASS only if mappings and contracts are explicitly verified (no mismatched ports or families).\n\nFindings:\n- Concern: core_infra_mapping_consistency\n  Type: Overlap\n  Similarity: 0.55\n  Evidence:\n    - memory-bank/plan/organize.md:110-121,150-156\n    - Why: Follows table mapping and health contracts.\n\nIMPORTANT NOTE: No deployments here; produce a verification matrix (service, family, tag, port/health).",
        "done": false
      },
      {
        "text": "PHASE 5: Service Migration — Phase 2 (GPU services on MainPC) — ANALYSIS\n\nPurpose: Validate GPU services mapping and machine-profile defaults (mainpc).\nScope: Semantic/architectural only.\n\nChecks:\n• Services mapped to CUDA 12.1 families.\n• MACHINE=mainpc; GPU envs sane (GPU_VISIBLE_DEVICES, TORCH_CUDA_ARCH_LIST).\n• Health/ports match §F.\n• No CPU images contaminated with GPU deps.\n\nLOGIC PARITY CHECK: GPU mapping matches table and hardware-aware defaults.\n\nDecision Gate: PASS only if GPU services have correct families/envs and contracts.\n\nFindings:\n- Concern: gpu_migration_readiness\n  Type: Overlap\n  Similarity: 0.60\n  Evidence:\n    - memory-bank/plan/organize.md:39,51-60,117-141\n    - Why: Mirrors CUDA baseline and service list.\n\nIMPORTANT NOTE: Analysis-only; verify env/ports/contracts; do not start containers here.",
        "done": false
      },
      {
        "text": "PHASE 6: Service Migration — Phase 3 (CPU services on PC2) — ANALYSIS\n\nPurpose: Validate CPU services mapping and machine-profile defaults (pc2).\nScope: Semantic/architectural only.\n\nChecks:\n• Services mapped to base-cpu-pydeps/family-web as appropriate.\n• MACHINE=pc2; resource knobs (threads/workers) align with §D.\n• Ports/health match §F.\n• No GPU deps leak into CPU images.\n\nLOGIC PARITY CHECK: CPU mapping matches table and machine-profile.\n\nDecision Gate: PASS only if CPU services/families/envs/contracts are consistent.\n\nFindings:\n- Concern: cpu_migration_readiness\n  Type: Overlap\n  Similarity: 0.60\n  Evidence:\n    - memory-bank/plan/organize.md:51-60,156-176\n    - Why: Mirrors pc2 defaults and service list.\n\nIMPORTANT NOTE: Analysis-only; produce mapping evidence and constraints checks; no runtime changes here.",
        "done": false
      },
      {
        "text": "PHASE 7: Observability Integration — ANALYSIS\n\nPurpose: Confirm observability payload completeness and startup emission plan.\nScope: Semantic/architectural only.\n\nChecks:\n• Payload includes image tag, SBOM digest, and git SHA.\n• Emitted at service startup to UnifiedObservabilityCenter.\n• No secrets; stable schema.\n\nLOGIC PARITY CHECK: Matches §H Observability integration intent.\n\nDecision Gate: PASS only if payload fields and emitter locations are defined and consistent.\n\nFindings:\n- Concern: observability_payload_completeness\n  Type: Overlap\n  Similarity: 0.55\n  Evidence:\n    - memory-bank/plan/organize.md:196-197\n    - Why: Aligns with startup emission requirement.\n\nIMPORTANT NOTE: Analysis-only; provide schema/field list and emitter hooks; no runtime emission here.",
        "done": false
      },
      {
        "text": "PHASE 8: Rollback Procedure Readiness — ANALYSIS\n\nPurpose: Ensure previous images are retained and pinning strategy is clear.\nScope: Semantic/architectural only.\n\nChecks:\n• `-prev` tags exist alongside new tags.\n• Supervisors can pin via `FORCE_IMAGE_TAG`.\n• Health/ports remain valid after rollback.\n\nLOGIC PARITY CHECK: Matches §H rollback procedure.\n\nDecision Gate: PASS only if retention and pinning are verifiably in place.\n\nFindings:\n- Concern: rollback_policy_enforceability\n  Type: Overlap\n  Similarity: 0.55\n  Evidence:\n    - memory-bank/plan/organize.md:198-199\n    - Why: Mirrors rollback guidance.\n\nIMPORTANT NOTE: Analysis-only; confirm retention/pinning evidence; no image retags here.",
        "done": false
      }
    ]
  }
]