### **1. TASK EXECUTION COMMANDS:**

**SHOW HIERARCHICAL STRUCTURE:**
```bash
python3 todo_manager.py show TASK_ID 
# Shows main TODOs with all sub-steps
# Displays commands ready for execution
```

**EXECUTE SUB-TODO:**
```bash
python3 todo_manager.py exec TASK_ID 4.1
# Executes specific sub-step (4.1)
# Runs the associated command
# Marks as completed automatically
```

**MARK MAIN TODO DONE:**
```bash
python3 todo_manager.py done TASK_ID 4
# Marks main TODO as completed
# Only when all sub-steps (4.1-4.7) are done
```

### **4. ENHANCED WORKFLOW SEQUENCE:**
```bash
# 1. Check hierarchical status
python3 todo_manager.py show TASK_ID 
# 2. Execute sub-step with command
python3 todo_manager.py exec TASK_ID 4.1
# â†’ Runs: diff docker-compose.yml docker-compose.yml.backup

# 3. Continue to next sub-step
python3 todo_manager.py exec TASK_ID 4.2
# â†’ Runs: docker-compose build --no-cache

# 4. If sub-step fails, run rollback
python3 todo_manager.py exec TASK_ID 4.7
# â†’ Runs: docker-compose down && echo "ROLLBACK COMPLETED"

# 5. Mark main TODO done when all sub-steps complete
python3 todo_manager.py done TASK_ID 4
```

---

## **ðŸ”Ž Auxiliary Read-Only Tools**

- `python3 plan_next.py`
  - Identifies next unfinished phase per task
  - Extracts command previews from fenced blocks
  - Lints plan: Phase 0 position, IMPORTANT NOTE presence, completion monotonicity

- `python3 plain_hier.py <TASK_ID>`
  - Shows compact hierarchical view of phases with checkmarks
  - Prints snippet of "IMPORTANT NOTE:" if present
  - Previews first fenced command block

Use these before executing any phase to verify the IMPORTANT NOTE and expected commands.

---

## **ðŸ“± QUICK REFERENCE COMMANDS**

```bash
# Show plan
python3 todo_manager.py show <TASK_ID>


python3 todo_manager.py done <TASK_ID> <PHASE_INDEX>

# Show all active tasks
python3 todo_manager.py list
```

## âœ… EXECUTION POLICY (ENFORCED) 
- ORDER ENFORCEMENT:
  - No skipping phases; mark in sequence only
  - If confidence < 90%, repeat review and pre-analysis